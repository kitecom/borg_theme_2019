/* jshint node: true */
'use strict';

var gulp = require('gulp')
,	path = require('path')
,	package_manager = require('../package-manager')
,	fs = require('fs')
,	shell = require('shelljs')
,	_ = require('underscore')
,	glob = require('glob');

gulp.task('services', function(cb)
{

	// We must check if every service has its correspondent ServiceController
	// If they aren't there, we show a warning message.
	var arr_services_controllers = [];
	_.each(package_manager.getContents(), function (module){
		if (!!module.content['autogenerated-services']){
			_.each(module.content['autogenerated-services'], function (service)
			{
				arr_services_controllers.push(module.baseDir + '/SuiteScript/' + service + '.js');
			}, this);
		}
	}, this);

	_.each(arr_services_controllers, function (controller)
	{
		try
		{
			fs.accessSync(controller);
		}
		catch(e)
		{
			console.log('Warning: the file ' + controller + ' is required by a service but couldn\'t be found');
		}
	});


	// New way of defining services for autogeneration.
	// In ns.package.json services define an object containing the .ss file name and the controller referenced
	var servicesConfig = package_manager.getAutogeneratedServices();

	servicesConfig.forEach(function(obj){

		_.each(obj, function(value, key)
		{
			// If you don't specify a controller for a service and it exists, assume it's the former implementation
			if(!obj[key])
			{
				console.log('Service generation',key,' skipped. Controller name must be specified as a value');
			}
			if(key.indexOf('/') >= 0 || key.indexOf('\\') >= 0)
			{
				console.log('Service generation',key,' skipped. Please specify only the filename as the key in the ns.package.json');
			}
			else if(key.indexOf('*') >= 0)
			{
				console.log('Service generation',key,' skipped. Wildcards are not allowed in the service name');
			}
			else
			{
				shell.mkdir('-p', path.join(process.gulp_dest, 'services'));

				var dest = path.join(process.gulp_dest, 'services', key);

				/*
				AUTOGENERATED CODE TEMPLATE:
				function service(request, response)
				{
					'use strict';
					try
					{
						require('<%= controllerName %>').handle(request, response);
					}
					catch(ex)
					{
						console.log('<%= controllerName %> ', ex);
						var controller = require('ServiceController');
						controller.response = response;
						controller.request = request;
						controller.sendError(ex);
					}
				}
				*/
				var template = _.template('function service(request, response)\n{\n\t\'use strict\';\n\ttry \n\t{\n\t\trequire(\'<%= controllerName %>\').handle(request, response);\n\t} \n\tcatch(ex)\n\t{\n\t\tconsole.log(\'<%= controllerName %> \', ex);\n\t\tvar controller = require(\'ServiceController\');\n\t\tcontroller.response = response;\n\t\tcontroller.request = request;\n\t\tcontroller.sendError(ex);\n\t}\n}');
				var serviceCode = template({controllerName: obj[key]});
				fs.writeFileSync(dest, serviceCode);
			}
		});
	});

	var arrAutogeneratedServices = _.flatten(_.map(servicesConfig, function(service)
	{
		return _.keys(service);
	}));

	// This is the former implementation of service files as a list of globs to be copied to the services directory
	var globs = package_manager.getGlobsFor('services');

	_.each(globs, function(pathToFiles)
	{
		var arrFiles = glob.sync(pathToFiles);
		_.each(arrFiles, function(pathToFile)
		{
			var serviceName = path.basename(pathToFile);
			if (_.indexOf(arrAutogeneratedServices, serviceName) !== -1)
			{
				console.warn('Warning: ' + serviceName + ' will not be autogenerated because there is a custom service with the same name');
			}
		});
	});

    if(!globs || !globs.length)
    {
        return cb();
    }

	return gulp.src(globs)
	.pipe(package_manager.handleOverrides())
	.pipe(gulp.dest(path.join(process.gulp_dest, 'services'), { mode: '0777' }));
});
