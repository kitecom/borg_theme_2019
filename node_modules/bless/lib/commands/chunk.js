'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var executeChunk = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(input, outputDir, chunkOptions) {
    var basename, _ref, data, maps, totalSelectorCount, chunkData, sourcemaps, chunks;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            basename = _path2.default.basename(input, '.css');
            _context.next = 3;
            return (0, _index.chunkFile)(input, chunkOptions);

          case 3:
            _ref = _context.sent;
            data = _ref.data;
            maps = _ref.maps;
            totalSelectorCount = _ref.totalSelectorCount;
            chunkData = data.map(function (ast, index) {
              var outputFilename = _path2.default.join(outputDir, basename + '.' + index + '.css');

              return _fsPromise2.default.writeFile(outputFilename, ast);
            });
            sourcemaps = maps.map(function (sourcemap, index) {
              var outputFilename = _path2.default.join(outputDir, basename + '.' + index + '.css.map');

              return _fsPromise2.default.writeFile(outputFilename, (0, _stringify2.default)(sourcemap));
            });
            _context.next = 11;
            return _promise2.default.all(chunkData);

          case 11:
            chunks = _context.sent;
            _context.next = 14;
            return _promise2.default.all(sourcemaps);

          case 14:
            return _context.abrupt('return', chunks);

          case 15:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return function executeChunk(_x, _x2, _x3) {
    return ref.apply(this, arguments);
  };
}();

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _commonYargs = require('./common-yargs');

var _commonYargs2 = _interopRequireDefault(_commonYargs);

var _index = require('../index');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _fsPromise = require('fs-promise');

var _fsPromise2 = _interopRequireDefault(_fsPromise);

var _fsUtils = require('../fs-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function execute(options) {
  return (0, _fsUtils.expand)(options.input).filter(function (x) {
    return (/\.css$/.test(x)
    );
  }).map(function (filepath) {
    var outputDir = options.outDir;

    return (0, _fsUtils.ensureDir)(outputDir).then(function () {
      return executeChunk(filepath, outputDir, { sourcemaps: options.sourcemaps });
    });
  }).flatMap(function (x) {
    return x;
  }).reduce(function (acc, x) {
    return acc.concat([x]);
  }, []).toPromise(_promise2.default).then(function () {
    console.log(_chalk2.default.green('Complete'));
    return 0;
  });
}

function yargsSetup() {
  _yargs2.default.command('chunk', 'breaks up css file to multiple files if it exceeds IE selector limits');
}

function examples() {
  _yargs2.default.example('$0 chunk <input file|directory>   (chunked files will reside next to input css files with the format *.##.css)');
  _yargs2.default.example('$0 chunk <input file|directory> --out-dir <output directory>');
  _yargs2.default.example('$0 chunk <input file|directory> --sourcemaps');
}

function parseArgs(argv) {
  _yargs2.default.reset();

  (0, _commonYargs2.default)();
  examples();

  var options = _yargs2.default.help('h').alias('h', 'help').options({
    'out-dir': {
      description: 'output directory',
      type: 'string'
    },
    'sourcemaps': {
      description: 'ouput sourcemaps',
      type: 'boolean'
    }
  }).parse(argv);

  if (options.help) {
    return options;
  }

  options.input = options._.length > 0 ? options._[0] : null;

  if (!options.input) {
    throw 'No input provided';
  }

  options.input = _path2.default.resolve(options.input);

  if (!options.outDir) {
    if (_fs2.default.statSync(options.input).isDirectory()) {
      options.outDir = options.input;
    } else {
      options.outDir = _path2.default.dirname(options.input);
    }
  } else {
    options.outDir = _path2.default.resolve(options.outDir);
  }

  return options;
}

exports.default = {
  execute: execute,
  examples: examples,
  yargsSetup: yargsSetup,
  parseArgs: parseArgs
};
module.exports = exports['default'];