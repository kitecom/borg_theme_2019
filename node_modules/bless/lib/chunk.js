'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

exports.default = chunk;

var _css = require('css');

var _css2 = _interopRequireDefault(_css);

var _count = require('./count');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = [chunks].map(_regenerator2.default.mark);

function createAst(rules, selectorCount) {
  return {
    ast: {
      type: 'stylesheet',
      stylesheet: {
        rules: rules
      }
    },
    selectorCount: selectorCount
  };
}

function chunks(ast) {
  var rules, splitRules, selectorCount, i, rule, ruleSelectorCount;
  return _regenerator2.default.wrap(function chunks$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          rules = ast.stylesheet.rules;
          splitRules = [];
          selectorCount = 0;
          i = 0;

        case 4:
          if (!(i < rules.length)) {
            _context.next = 17;
            break;
          }

          rule = rules[i];
          ruleSelectorCount = (0, _count.count)(rule);

          if (!(selectorCount + ruleSelectorCount > _constants.SELECTOR_LIMIT)) {
            _context.next = 12;
            break;
          }

          _context.next = 10;
          return createAst(splitRules, selectorCount);

        case 10:
          splitRules = [];
          selectorCount = 0;

        case 12:

          splitRules.push(rule);
          selectorCount += ruleSelectorCount;

        case 14:
          i++;
          _context.next = 4;
          break;

        case 17:
          _context.next = 19;
          return createAst(splitRules, selectorCount);

        case 19:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked[0], this);
}

function chunk(code, options) {
  var fullAst = _css2.default.parse(code, { source: options.source });
  var totalSelectorCount = 0;
  var data = [];
  var maps = [];

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(chunks(fullAst)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _step.value;
      var ast = _step$value.ast;
      var selectorCount = _step$value.selectorCount;

      var stringified = _css2.default.stringify(ast, { sourcemap: options.sourcemaps });
      totalSelectorCount += selectorCount;
      if (options.source && options.sourcemaps) {
        data.push(stringified.code);
        maps.push(stringified.map);
      } else {
        data.push(stringified);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return { data: data, maps: maps, totalSelectorCount: totalSelectorCount };
}
module.exports = exports['default'];